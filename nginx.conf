user www-data;
worker_processes auto;
worker_rlimit_nofile 100000;
pid /run/nginx.pid;
timer_resolution 500ms;

# Load modules
include /etc/nginx/modules-enabled/*.conf;

events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections 8000;

    # optmized to serve many clients with each thread, essential for linux -- for testing environment
    use epoll;

    # accept as many connections as possible, may flood worker connections if set too low -- for testing environment
    multi_accept on;
}

rtmp {
    server {
        listen 1935;
        chunk_size 4096;
        allow publish all;
        # allow publish 127.0.0.1;
        # deny publish all;

        application live {
            # exec ffmpeg -i rtmp://localhost:1935/live/$name -c:a libfdk_aac -b:a 128k -c:v libx264 -b:v 2500k -f flv -g 30 -r 30 -s 1280x720 -preset superfast -profile:v baseline rtmp://localhost:1935/live/$name;
            live on;
            record off;
            # meta copy;
            # hls_cleanup off;
            # record all;
            # record_path /var/www/html/stream/records;
            # record_max_size 512m;
            # record_unique on;
            # record_suffix %y%m%d_%H%M%S.flv;
            # exec_record_done ffmpeg -i $path -codec copy $dirname/$basename.mp4;

            hls on;
            hls_path /var/www/html/stream/hls;
            hls_fragment 2s;
            hls_playlist_length 86400;

            # dash on;
            # dash_path /var/www/html/stream/dash;
        }
    }
}

stream {
    server {
        listen 3307;
        proxy_pass 172.20.0.2:3306;
    }
}

http {
    charset utf-8;

    # copies data between one FD and other from within the kernel
    # faster then read() + write()
    sendfile on;

    # send headers in one peace, its better then sending them one by one
    tcp_nopush on;

    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;

    log_not_found off;

    client_max_body_size 64k;
    server_names_hash_bucket_size 512;
    types_hash_bucket_size 64;
    types_hash_max_size 2048;
    variables_hash_bucket_size 128;
    variables_hash_max_size 2048;

    # GeoIP Support/Variables
    include eibly/geoip.conf;

    # Eibly Global Settings and Variables
    include eibly/ec.conf;

    # only log critical errors
    error_log /var/log/nginx/error.log crit;

    # MIME
    include mime.types;
    default_type application/octet-stream;

    map "$time_local:$msec" $time_local_w_ms {
        ~(^\S+)(\s+\S+):\d+.(\d+)$ $1.$3$2;
    }

    log_format eibly escape=json '{"version":"nginx/$nginx_version",'
    '"time":"$msec",'
    '"origin":"$ec_origin",'
    '"uuid":"$request_id",'
    '"protocol":"$server_protocol",'
    '"method":"$request_method",'
    '"scheme":"$scheme",'
    '"domain":"$host",'
    '"port":"$server_port",'
    '"uri":"$uri",'
    '"query":"$args",'
    '"body-length":"$body_bytes_sent",'
    '"bytes-out":"$upstream_bytes_sent",'
    '"bytes-in":"$upstream_bytes_received",'
    '"status":"$status",'
    '"ip":"$remote_addr",'
    '"referer":"$http_referer",'
    '"agent":"$http_user_agent",'
    '"connection-time":"$connection_time",'
    '"connection":"$connection",'
    '"gzip-ratio":"$gzip_ratio",'
    '"ray-id":"$http_cf_ray",'
    '"request-time":"$request_time",'
    '"ssl-cipher":"$ssl_cipher",'
    '"ssl-protocol":"$ssl_protocol",'
    '"geo-country":"$geoip2_data_country_name",'
    '"geo-state":"$geoip2_data_state_name",'
    '"geo-city":"$geoip2_data_city_name",'
    '"geo-isp":"$geoip2_data_asn_organization"}';

    # cache informations about FDs, frequently accessed files
    # can boost performance, but you need to test those values
    open_file_cache max=50000 inactive=30s;
    open_file_cache_valid 10s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # SSL
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    ssl_protocols TLSv1.3 TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers off;
    ssl_early_data on;

    #ssl_conf_command Options KTLS; # use to enable kTLS
    sendfile_max_chunk 512k;

    # OCSP Stapling
    ssl_stapling off;
    ssl_stapling_verify on;
    resolver 1.1.1.1 1.0.0.1 [2606:4700:4700::1111] [2606:4700:4700::1001] valid=60s;
    resolver_timeout 2s;

    # DH parameters
    ssl_dhparam /etc/ssl/dhparam.pem;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    # request timed out -- default 60
    client_body_timeout 30;

    # if client stop responding, free up memory -- default 60
    send_timeout 10;

    # server will close connection after this time -- default 75
    keepalive_timeout 75;

    # number of requests client can make over keep-alive -- for testing environment
    keepalive_requests 100000;

    #########################################
    # Just For Security Reason
    #########################################

    # Security reasons, turn off nginx versions
    server_tokens off;

    # Disable global etags (Automatic added to images and css files)
    etag off;

    # Security reasons, disable server header
    more_set_headers "Server: $ec_name";

    geo $ip_whitelist {
        default        0;
        127.0.0.1      1;
        172.80.0.1/32 1;
        172.80.0.10/32 1;
        192.168.0.10/32 1;
        179.83.202.217/32 1;
    }
    map $ip_whitelist $limited_ip {
        0  $binary_remote_addr;
        1  "";
    }

    # limit the number of connections per single IP
    limit_conn_zone $binary_remote_addr zone=connsPerIP:20m;
    limit_conn_log_level warn;

    limit_req_zone $binary_remote_addr zone=wplogin:10m rate=10r/s;

    # limit the number of requests for a given session
    limit_req_zone $limited_ip zone=reqsPerMinutePerIP:50m rate=600r/m;
    limit_req zone=reqsPerMinutePerIP burst=700 nodelay;
    limit_req_status 429;

    # if the request body size is more than the buffer size, then the entire (or partial)
    # request body is written into a temporary file
    client_body_buffer_size 128k;

    # headerbuffer size for the request header from client -- for testing environment
    client_header_buffer_size 4k;

    # maximum number and size of buffers for large headers to read from client request
    large_client_header_buffers 4 256k;

    # read timeout for the request body from client -- for testing environment
    # client_body_timeout   3m;
    # how long to wait for the client to send a request header -- for testing environment
    client_header_timeout 3m;

    ##
    # Virtual Host Configs
    ##
    include /etc/nginx/sites-enabled/*.conf;
    include /etc/nginx/vhosts.d/*.conf;

}
